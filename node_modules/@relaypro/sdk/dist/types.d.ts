/// <reference types="node" />
import http from 'http';
import https from 'https';
import WebSocket from 'ws';
import { Button, CallDirection, IncidentStatus, NotificationPriority, NotificationSound, Taps } from './enums';
import { RelayEventAdapter } from './index';
export declare type LedIndex = `ring` | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | `1` | `2` | `3` | `4` | `5` | `6` | `7` | `8` | `9` | `10` | `11` | `12` | `13` | `14` | `15` | `16`;
export declare type LedEffect = `off` | `breathe` | `flash` | `rotate` | `rainbow` | `static`;
export declare type LedInfo = {
    rotations?: number;
    count?: number;
    duration?: number;
    repeat_delay?: number;
    pattern_repeats?: number;
    colors?: {
        [K in LedIndex]?: string;
    };
};
export declare type Msg = {
    _id: string;
    _type: string;
    error?: string;
    button?: string;
    taps?: string;
    source?: string;
    name?: string;
    event?: string;
    notification_state?: string;
};
export declare type Options = {
    server?: http.Server | https.Server;
};
export declare type LocalWebSocket = WebSocket & {
    connectionId: string;
    isAlive: boolean;
};
export interface Workflow {
    (relay: RelayEventAdapter): void;
}
export interface Relay {
    workflow: (path: string, workflow: Workflow) => void;
}
export declare type ButtonEvent = {
    button: Button;
    taps: Taps;
};
export declare type NotificationOptions = {
    priority: NotificationPriority;
    title: string;
    body: string;
    sound: NotificationSound;
};
export declare type NotificationState = {
    acknowledged: string[];
    created: string[];
    cancelled: string[];
    timed_out: string[];
};
export declare type NotificationEvent = {
    source: string;
    event: string;
    name: string;
    notification_state: NotificationState;
};
export declare type RegisterRequest = {
    uri?: string;
    password?: string;
    expires?: number;
};
export declare type BaseCall = {
    call_id: string;
};
export declare type StartedCall = BaseCall & {
    device_id: string;
    device_name: string;
};
export declare type PlaceCall = Partial<Omit<StartedCall, `call_id`>>;
export declare type ReceivedCall = StartedCall & {
    start_time_epoch: number;
    direction: CallDirection;
};
export declare type RingingCall = ReceivedCall;
export declare type ConnectedCall = ReceivedCall & {
    connect_time_epoch: number;
};
export declare type DisconnectedCall = ConnectedCall & {
    reason: string;
    end_time_epoch: number;
};
export declare type FailedCall = DisconnectedCall;
export declare type Call = StartedCall | ReceivedCall | ConnectedCall | DisconnectedCall | FailedCall;
export declare type IncidentEvent = {
    type: IncidentStatus;
    incident_id: string;
    reason: string;
};
export declare type Prompt = {
    id: string;
};
